import 'package:flutter/material.dart';
import '../services/ai/ai_config_service.dart';
import '../services/ai/ai_service.dart';
import '../utils/feedback_utils.dart';

class AIConfigPage extends StatefulWidget {
  const AIConfigPage({super.key});

  @override
  State<AIConfigPage> createState() => _AIConfigPageState();
}

class _AIConfigPageState extends State<AIConfigPage> {
  final _apiKeyController = TextEditingController();
  final _endpointController = TextEditingController();
  final _visionModelController = TextEditingController();
  final _textModelController = TextEditingController();
  
  bool _enableImageImport = true;
  bool _enableTableImport = true;
  bool _enableTextImport = true;
  bool _isLoading = false;
  bool _isTesting = false;

  @override
  void initState() {
    super.initState();
    _loadConfig();
  }

  @override
  void dispose() {
    _apiKeyController.dispose();
    _endpointController.dispose();
    _visionModelController.dispose();
    _textModelController.dispose();
    super.dispose();
  }

  Future<void> _loadConfig() async {
    setState(() => _isLoading = true);
    
    try {
      final config = await AIConfigService.getConfig();
      _apiKeyController.text = config.apiKey;
      _endpointController.text = config.endpoint;
      _visionModelController.text = config.visionModel;
      _textModelController.text = config.textModel;
      _enableImageImport = config.enableImageImport;
      _enableTableImport = config.enableTableImport;
      _enableTextImport = config.enableTextImport;
    } catch (e) {
      _showErrorSnackBar('Âä†ËΩΩÈÖçÁΩÆÂ§±Ë¥•: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _saveConfig() async {
    if (_apiKeyController.text.isEmpty || _endpointController.text.isEmpty) {
      FeedbackUtils.show(context, 'ËØ∑Â°´ÂÜôAPI KeyÂíåEndpoint');
      return;
    }

    setState(() => _isLoading = true);

    try {
      final config = AIConfig(
        apiKey: _apiKeyController.text.trim(),
        endpoint: _endpointController.text.trim(),
        visionModel: _visionModelController.text.trim(),
        textModel: _textModelController.text.trim(),
        enabled: true,
        enableImageImport: _enableImageImport,
        enableTableImport: _enableTableImport,
        enableTextImport: _enableTextImport,
      );

      await AIConfigService.saveConfig(config);
      FeedbackUtils.show(context, 'ÈÖçÁΩÆ‰øùÂ≠òÊàêÂäü');
    } catch (e) {
      FeedbackUtils.show(context, '‰øùÂ≠òÈÖçÁΩÆÂ§±Ë¥•: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _testConfig() async {
    print('üéØ [UIÊµãËØï] Áî®Êà∑ÁÇπÂáªÊµãËØïÈÖçÁΩÆÊåâÈíÆ');
    
    if (_apiKeyController.text.isEmpty || _endpointController.text.isEmpty) {
      print('‚ùå [UIÊµãËØï] È™åËØÅÂ§±Ë¥•: API KeyÊàñEndpoint‰∏∫Á©∫');
      FeedbackUtils.show(context, 'ËØ∑ÂÖàÂ°´ÂÜôAPI KeyÂíåEndpoint');
      return;
    }

    if (_textModelController.text.isEmpty) {
      print('‚ùå [UIÊµãËØï] È™åËØÅÂ§±Ë¥•: ÊñáÊú¨Ê®°Âûã‰∏∫Á©∫');
      FeedbackUtils.show(context, 'ËØ∑ÂÖàÂ°´ÂÜôÊñáÊú¨Ê®°Âûã');
      return;
    }

    print('‚úÖ [UIÊµãËØï] ËæìÂÖ•È™åËØÅÈÄöËøá');
    print('üìã [UIÊµãËØï] Áî®Êà∑ËæìÂÖ•‰ø°ÊÅØ:');
    print('   - API Key: ${_apiKeyController.text.substring(0, 8)}...');
    print('   - Endpoint: ${_endpointController.text}');
    print('   - ÊñáÊú¨Ê®°Âûã: ${_textModelController.text}');
    print('   - ËßÜËßâÊ®°Âûã: ${_visionModelController.text}');
    print('   - ÂõæÁâáÂØºÂÖ•: $_enableImageImport');
    print('   - Ë°®Ê†ºÂØºÂÖ•: $_enableTableImport');
    print('   - ÊñáÂ≠óÂØºÂÖ•: $_enableTextImport');

    setState(() => _isTesting = true);
    print('üîÑ [UIÊµãËØï] ËÆæÁΩÆÊµãËØïÁä∂ÊÄÅ‰∏∫true');

    try {
      print('üöÄ [UIÊµãËØï] ÂºÄÂßãË∞ÉÁî®AIÊúçÂä°ÊµãËØï...');
      
      // ÂàõÂª∫‰∏¥Êó∂ÈÖçÁΩÆËøõË°åÊµãËØï
      final tempConfig = AIConfig(
        apiKey: _apiKeyController.text,
        endpoint: _endpointController.text,
        visionModel: _visionModelController.text,
        textModel: _textModelController.text,
        enabled: true,
        enableImageImport: _enableImageImport,
        enableTableImport: _enableTableImport,
        enableTextImport: _enableTextImport,
      );
      
      // ‰∏¥Êó∂‰øùÂ≠òÈÖçÁΩÆÁî®‰∫éÊµãËØï
      await AIConfigService.saveConfig(tempConfig);
      
      // ÊµãËØïÈÖçÁΩÆ
      final success = await AIService.testConfig();
      
      if (success) {
        print('üéâ [UIÊµãËØï] AIÊúçÂä°ÊµãËØïÊàêÂäü');
        FeedbackUtils.show(context, 'ÈÖçÁΩÆÊµãËØïÊàêÂäü');
      } else {
        print('‚ùå [UIÊµãËØï] AIÊúçÂä°ÊµãËØïÂ§±Ë¥•');
        FeedbackUtils.show(context, 'ÈÖçÁΩÆÊµãËØïÂ§±Ë¥•');
      }
    } catch (e) {
      print('üí• [UIÊµãËØï] ÊµãËØïËøáÁ®ãÂá∫Áé∞ÂºÇÂ∏∏: $e');
      print('üîç [UIÊµãËØï] ÂºÇÂ∏∏Á±ªÂûã: ${e.runtimeType}');
      FeedbackUtils.show(context, 'ÈÖçÁΩÆÊµãËØïÂ§±Ë¥•: $e');
    } finally {
      setState(() => _isTesting = false);
      print('üîÑ [UIÊµãËØï] ËÆæÁΩÆÊµãËØïÁä∂ÊÄÅ‰∏∫false');
      print('üèÅ [UIÊµãËØï] ÊµãËØïÊµÅÁ®ãÁªìÊùü');
    }
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('AIÂØºÂÖ•ÈÖçÁΩÆ'),
        actions: [
          IconButton(
            icon: const Icon(Icons.save),
            onPressed: _isLoading ? null : _saveConfig,
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : ListView(
              padding: const EdgeInsets.all(16),
              children: [
                // Âü∫Á°ÄÈÖçÁΩÆ
                _buildSection('Âü∫Á°ÄÈÖçÁΩÆ', [
                  _buildTextField(
                    'API Key',
                    _apiKeyController,
                    obscureText: true,
                    hintText: 'ËæìÂÖ•‰Ω†ÁöÑAPI Key',
                  ),
                  const SizedBox(height: 16),
                  _buildTextField(
                    'API Endpoint',
                    _endpointController,
                    hintText: 'ËæìÂÖ•APIÁ´ØÁÇπURL',
                  ),
                  const SizedBox(height: 16),
                  _buildTextField(
                    'ËßÜËßâÊ®°Âûã',
                    _visionModelController,
                    hintText: 'Â¶Ç: gpt-4-vision-preview',
                  ),
                  const SizedBox(height: 16),
                  _buildTextField(
                    'ÊñáÊú¨Ê®°Âûã',
                    _textModelController,
                    hintText: 'Â¶Ç: gpt-4',
                  ),
                ]),

                const SizedBox(height: 24),

                // ÂäüËÉΩÂºÄÂÖ≥
                _buildSection('ÂäüËÉΩÂºÄÂÖ≥', [
                  SwitchListTile(
                    title: const Text('ÂõæÁâáÂØºÂÖ•'),
                    subtitle: const Text('ÊîØÊåÅËØæÁ®ãË°®ÂõæÁâáËØÜÂà´'),
                    value: _enableImageImport,
                    onChanged: (value) => setState(() => _enableImageImport = value),
                  ),
                  SwitchListTile(
                    title: const Text('Ë°®Ê†ºÂØºÂÖ•'),
                    subtitle: const Text('ÊîØÊåÅË°®Ê†ºÊï∞ÊçÆËß£Êûê'),
                    value: _enableTableImport,
                    onChanged: (value) => setState(() => _enableTableImport = value),
                  ),
                  SwitchListTile(
                    title: const Text('ÊñáÂ≠óÂØºÂÖ•'),
                    subtitle: const Text('ÊîØÊåÅÊñáÂ≠óÊèèËø∞Ëß£Êûê'),
                    value: _enableTextImport,
                    onChanged: (value) => setState(() => _enableTextImport = value),
                  ),
                ]),

                const SizedBox(height: 24),

                // È¢ÑËÆæÈÖçÁΩÆ
                _buildSection('È¢ÑËÆæÈÖçÁΩÆ', [
                  _buildPresetButton('OpenAI', () => _setPresetOpenAI()),
                  const SizedBox(height: 8),
                  _buildPresetButton('Claude', () => _setPresetClaude()),
                  const SizedBox(height: 8),
                  _buildPresetButton('Gemini', () => _setPresetGemini()),
                  const SizedBox(height: 8),
                  _buildPresetButton('DeepSeek', () => _setPresetDeepSeek()),
                ]),

                const SizedBox(height: 24),

                // Êìç‰ΩúÊåâÈíÆ
                Row(
                  children: [
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: _isTesting ? null : _testConfig,
                        icon: _isTesting
                            ? const SizedBox(
                                width: 16,
                                height: 16,
                                child: CircularProgressIndicator(strokeWidth: 2),
                              )
                            : const Icon(Icons.science),
                        label: Text(_isTesting ? 'ÊµãËØï‰∏≠...' : 'ÊµãËØïÈÖçÁΩÆ'),
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: OutlinedButton.icon(
                        onPressed: _isLoading ? null : _saveConfig,
                        icon: const Icon(Icons.save),
                        label: const Text('‰øùÂ≠òÈÖçÁΩÆ'),
                      ),
                    ),
                  ],
                ),
              ],
            ),
    );
  }

  Widget _buildSection(String title, List<Widget> children) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: const TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 16),
        ...children,
      ],
    );
  }

  Widget _buildTextField(
    String label,
    TextEditingController controller, {
    bool obscureText = false,
    String? hintText,
  }) {
    return TextField(
      controller: controller,
      obscureText: obscureText,
      decoration: InputDecoration(
        labelText: label,
        hintText: hintText,
        border: const OutlineInputBorder(),
      ),
    );
  }

  Widget _buildPresetButton(String title, VoidCallback onPressed) {
    return OutlinedButton(
      onPressed: onPressed,
      child: Text(title),
    );
  }

  void _setPresetOpenAI() {
    _endpointController.text = 'https://api.openai.com/v1';
    _visionModelController.text = 'gpt-4o-mini';
    _textModelController.text = 'gpt-4o';
  }

  void _setPresetClaude() {
    _endpointController.text = 'https://api.anthropic.com';
    _visionModelController.text = 'claude-3-5-sonnet';
    _textModelController.text = 'claude-3-5-sonnet';
  }

  void _setPresetGemini() {
    _endpointController.text = 'https://generativelanguage.googleapis.com/v1';
    _visionModelController.text = 'gemini-1.5-pro';
    _textModelController.text = 'gemini-1.5-pro';
  }

  void _setPresetDeepSeek() {
    _endpointController.text = 'https://api.deepseek.com/chat/completions';
    _visionModelController.text = ''; 
    _textModelController.text = 'deepseek-chat';
  }
}
